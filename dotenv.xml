<?xml version="1.0" encoding="UTF8"?>
<Export generator="Cache" version="25">
<Class name="DotEnv.Command">
<IncludeCode>%occOptions,%occStatus</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64475,39499.872693</TimeCreated>

<Property name="ErrorFilePath">
<Type>%String</Type>
</Property>

<Property name="OutputFilePath">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..ErrorFilePath = ##class(%File).TempFilename()
  set ..OutputFilePath = ##class(%File).TempFilename()
  quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set sc = $$$ADDSC(sc, ##class(%File).Delete(..ErrorFilePath))
  set sc = $$$ADDSC(sc, ##class(%File).Delete(..OutputFilePath))
  quit sc
]]></Implementation>
</Method>

<Method name="CaptureEnvsFromHostOS">
<Internal>1</Internal>
<FormalSpec>*outputBuffer:%Stream.Object=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set commmandString = ""
  
  if $$$isWINDOWS {
    set commmandString = $$$FormatText("set 2> ""%1"" > ""%2""", ..ErrorFilePath, ..OutputFilePath)
  } elseif $$$isUNIX {
    set commmandString = $$$FormatText("printenv 2> ""%1"" > ""%2""", ..ErrorFilePath, ..OutputFilePath)
  }
  
  do $zf(-1, commmandString)
  
  set outputBuffer = ##class(%FileCharacterStream).%New()  
  set outputBuffer.Filename = ..OutputFilePath
  
  set errorBuffer = ##class(%FileCharacterStream).%New()  
  set errorBuffer.Filename = ..ErrorFilePath 
  
  if outputBuffer.Size = 0 return $$$ERROR(5001, "Unable to execute OS command, failed due to: "_errorBuffer.Read())
  
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DotEnv.Parser">
<Abstract>1</Abstract>
<IncludeCode>%occStatus</IncludeCode>
<TimeCreated>64475,39462.738299</TimeCreated>

<Method name="FromOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>*sc:%Status=$$$OK</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
  set command = ##class(DotEnv.Command).%New()
  set sc = command.CaptureEnvsFromHostOS(.output)
  quit ..CreateArray(output)
]]></Implementation>
</Method>

<Method name="FromPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,*sc:%Status=$$$OK,dotenv:%String=".dotenv"</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
  #dim dotEnvs, envs As %ArrayOfDataTypes
  
  set envs = ..FromOS(.sc)
  if $$$ISERR(sc) return envs
  set fs = ##class(%Stream.FileCharacter).%New()
  set sc = fs.LinkToFile(path_"/"_dotenv)
  set dotEnvs = ..CreateArray(fs)
  set envName = ""
  
  for i=1:1:dotEnvs.Count() {
    set envName = dotEnvs.Next(envName)
    set envValue = dotEnvs.GetAt(envName)
    
    if 'envs.IsDefined(envName) {
      set sc = envs.SetAt(envValue, envName)
      if $$$ISERR(sc) quit
    }
  }
  quit envs
]]></Implementation>
</Method>

<Method name="CreateArray">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>out:%Stream.Object</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
  set envs = ##class(%ArrayOfDataTypes).%New()
  if '$isobject(out) quit envs
  
  while 'out.AtEnd {
    set line = out.ReadLine()
    set envName = $piece(line, "=")
    set envValue = $piece(line, "=", 2)
    if $extract(envValue) = $char(34) && ($extract(envValue, *) = $char(34)) {
      set envValue = $zconvert($extract(envValue, 2, *-1), "I", "JS")
    }    
    do envs.SetAt(envValue, envName)
  }
  quit envs
]]></Implementation>
</Method>
</Class>


<Class name="UnitTest.DotEnv.Command">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64475,39195.277896</TimeCreated>

<Property name="Command">
<Type>DotEnv.Command</Type>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Command = ##class(DotEnv.Command).%New()
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOnTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Command = ""
  quit $$$OK
]]></Implementation>
</Method>

<Method name="TestErrorFilePath">
<Implementation><![CDATA[  do $$$AssertTrue(..Command.OutputFilePath '= "", "generates a temp file for errors")
]]></Implementation>
</Method>

<Method name="TestOutputFilePath">
<Implementation><![CDATA[  do $$$AssertTrue(..Command.ErrorFilePath '= "", "generates a output file for command logs")
]]></Implementation>
</Method>

<Method name="TestOnCloseDeleteTempFiles">
<Implementation><![CDATA[
  set errorFilePath = ..Command.ErrorFilePath
  set outputFilePath = ..Command.OutputFilePath
  
  set ..Command = ""
  
  do $$$AssertNotTrue(errorFilePath '= "" && ##class(%File).Exists(errorFilePath), "deletes error temp file")
  do $$$AssertNotTrue(outputFilePath '= "" && ##class(%File).Exists(outputFilePath), "deletes output temp file")
]]></Implementation>
</Method>

<Method name="TestCaptureEnvsFromHostOS">
<Implementation><![CDATA[
  do $$$AssertStatusOK(..Command.CaptureEnvsFromHostOS(), "normally doesn't return an error")
  do ..Command.CaptureEnvsFromHostOS(.output)
  
  do $$$AssertTrue($isobject(output) && output.%Extends("%Stream.Object") && output.Size > 0, "returns a stream containg env variables")
]]></Implementation>
</Method>
</Class>


<Class name="UnitTest.DotEnv.Parser">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64475,39265.751964</TimeCreated>

<Method name="TestFromOS">
<Implementation><![CDATA[
  set envs = ##class(DotEnv.Parser).FromOS()
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes"), "returns an %ArrayOfDataTypes")
  
  do $$$AssertTrue(envs.Count() > 0, "parsed envs from host OS")
]]></Implementation>
</Method>

<Method name="TestFromPath">
<Implementation><![CDATA[
 
  set envs = ##class(DotEnv.Parser).FromPath(..GetTestDirectory("../fixtures"))
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes"), "returns an %ArrayOfDataTypes")
  
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes") && envs.Count() > 0, "returns an array containing var names and values")
  set envsFromOS = ##class(DotEnv.Parser).FromOS()

#if $$$isWINDOWS    
  do $$$AssertTrue(envs.GetAt("Path") = envsFromOS.GetAt("Path"), "never overwrites existing variables")
#else 
  // UNIX
  do $$$AssertTrue(envs.GetAt("PATH") = envsFromOS.GetAt("PATH"), "never overwrites existing variables")
#endif

  do $$$AssertTrue(envs.GetAt("DOTENV_HELLO") = "Hello from "".dotenv""", "parses escaped strings")
  do $$$AssertTrue(envs.GetAt("DOTENV_NUMBER_TEST") = 1234, "parses numbers")
]]></Implementation>
</Method>
</Class>


<Project name="dotenv" LastModified="2017-07-11 14:33:04.373606" Target="##class(DotEnv.Parser).FromPath(&quot;C:\CacheProjects\DEV\dotenv\tests\fixtures&quot;)" TargetType="0">
  <Items>
    <ProjectItem name="DotEnv.Command" type="CLS"></ProjectItem>
    <ProjectItem name="DotEnv.Parser" type="CLS"></ProjectItem>
    <ProjectItem name="UnitTest.DotEnv.Command" type="CLS"></ProjectItem>
    <ProjectItem name="UnitTest.DotEnv.Parser" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
