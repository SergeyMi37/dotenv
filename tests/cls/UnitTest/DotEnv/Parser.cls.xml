<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.DotEnv.Parser">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64475,39265.751964</TimeCreated>

<Method name="TestFromOS">
<Implementation><![CDATA[
  set envs = ##class(DotEnv.Parser).FromOS()
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes"), "returns an %ArrayOfDataTypes")
  
  do $$$AssertTrue(envs.Count() > 0, "parsed envs from host OS")
]]></Implementation>
</Method>

<Method name="TestFromPath">
<Implementation><![CDATA[
 
  set envs = ##class(DotEnv.Parser).FromPath(..GetTestDirectory("../fixtures"))
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes"), "returns an %ArrayOfDataTypes")
  
  do $$$AssertTrue($isobject(envs) && envs.%IsA("%ArrayOfDataTypes") && envs.Count() > 0, "returns an array containing var names and values")
  set envsFromOS = ##class(DotEnv.Parser).FromOS()

#if $$$isWINDOWS    
  do $$$AssertTrue(envs.GetAt("Path") = envsFromOS.GetAt("Path"), "never overwrites existing variables")
#else 
  // UNIX
  do $$$AssertTrue(envs.GetAt("PATH") = envsFromOS.GetAt("PATH"), "never overwrites existing variables")
#endif

  do $$$AssertTrue(envs.GetAt("DOTENV_HELLO") = "Hello from "".dotenv""", "parses escaped strings")
  do $$$AssertTrue(envs.GetAt("DOTENV_NUMBER_TEST") = 1234, "parses numbers")
]]></Implementation>
</Method>
</Class>
</Export>
